#ifdef IN_IDE_PARSER
#include "controller.h++"
#endif

#include <boost/archive/text_iarchive.hpp>
#include <boost/archive/text_oarchive.hpp>
#include <functional>
#include <sstream>
#include <boost/asio/read.hpp>
#include <boost/asio/write.hpp>

#include "controller_protocol.h++"
// #include "connection.h++"


namespace {
struct header;

template <typename Protocol, typename Gateway>
inline controller<Protocol, Gateway>::controller(boost::asio::io_service& s, Gateway& g) : io_service_(s), acceptor_(s), gateway_(g) {
}

template <typename Protocol, typename Gateway>
inline void controller<Protocol, Gateway>::run() {
	using namespace boost::asio;

	// open sockets

	acceptor_.open();
	acceptor_.set_option(socket_base::reuse_address(true));
	acceptor_.bind(typename Protocol::endpoint(cfg::configuration["socket"].as<std::string>()));
	acceptor_.listen();

	listen();
}

template <typename Protocol, typename Gateway>
inline void controller<Protocol, Gateway>::listen() {
	using namespace std;
	using namespace placeholders;
	using namespace boost::asio;

	auto* socket(new typename Protocol::socket{io_service_});
	acceptor_.async_accept(*socket, bind(&controller::accept, this, _1, shared_ptr<typename Protocol::socket>(socket)));
}

template <typename Protocol, typename Gateway>
inline controller<Protocol, Gateway>::~controller() {
	std::remove(acceptor_.local_endpoint().path().c_str());
}

template <typename Protocol, typename Gateway>
inline void controller<Protocol, Gateway>::accept(boost::system::error_code const& e, std::shared_ptr<typename Protocol::socket> s) {
	using namespace std;
	using namespace placeholders;
	using namespace boost::asio;

	auto* buf(new vector<char>(header_size));
	async_read(*s, buffer(*buf), bind(&controller::read_header, this, _1, _2, s, shared_ptr<vector<char>>(buf)));
	listen();
}

template <typename Protocol, typename Gateway>
inline void controller<Protocol, Gateway>::read_header(boost::system::error_code const& e, std::size_t const bytes_transferred, std::shared_ptr<typename Protocol::socket> s, std::shared_ptr<std::vector<char>> b) {
	using namespace std;
	using namespace placeholders;
	using namespace boost::asio;

	if (e || !bytes_transferred)
		return;

	// receive header and allocate an buffer of this size
	istringstream stream(b->data());
	size_t size{0};
	stream >> hex >> size;
	if (!size)
		return;

	auto* buf(new vector<char>(size));
	async_read(*s, buffer(*buf), bind(&controller::read_body, this, _1, _2, s, shared_ptr<vector<char>>(buf)));
}

template <typename Protocol, typename Gateway>
inline void controller<Protocol, Gateway>::read_body(boost::system::error_code const& e, std::size_t const bytes_transferred, std::shared_ptr<typename Protocol::socket> s, std::shared_ptr<std::vector<char>> b) {
	using namespace std;
	using namespace boost::asio;

	// on errors just return
	if (e || bytes_transferred != b->size())
		return;

	// de-serialize query
	query query;
	{
		istringstream stream(b->data());
		boost::archive::text_iarchive archive(stream);
		archive >> query;
	}
	// evaluate
	evaluate(query);
	{
		std::ostringstream stream;
		boost::archive::text_oarchive archive(stream);
		archive << query;
		boost::asio::async_write(*s, boost::asio::buffer(stream.str()), [](boost::system::error_code const&, std::size_t const) {});
	}
}

template <typename Protocol, typename Gateway>
inline void controller<Protocol, Gateway>:: evaluate(query& q) {
	using namespace std;

	// just switch to action
	switch (q.action_) {
	case query::action::nodelist:
		q.endpoints_ = gateway_.peers();
		break;
	case query::action::nodeadd:
		gateway_.insert(std::set<boost::asio::ip::udp::endpoint>(std::begin(q.endpoints_), std::end(q.endpoints_)));
		break;
	case query::action::nodedel:
		gateway_.remove(q.endpoints_.front());
		break;
	}
}

} // namespace: <>
