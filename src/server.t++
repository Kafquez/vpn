#ifdef IN_IDE_PARSER
#include "server.h++"
#endif

#include <functional>

namespace {

template <typename GatewayProtocol, typename ControllerProtocol, bool Threaded>
inline server<GatewayProtocol, ControllerProtocol, Threaded>::server() :
	io_(),
	thread_pool_{},
	signal_{io_},
	netdevice_{io_, std::bind(&server::send_remote, this, std::placeholders::_1), std::bind(&server::received_local, this, std::placeholders::_1)},
	gateway_(io_, std::bind(&server::send_local, this, std::placeholders::_1), std::bind(&server::received_remote, this, std::placeholders::_1))
{
	thread_pool_.run(std::bind(static_cast<std::size_t(boost::asio::io_service::*)()>(&boost::asio::io_service::run), std::ref(io_)));
}

template <typename GatewayProtocol, typename ControllerProtocol, bool Threaded>
inline server<GatewayProtocol, ControllerProtocol, Threaded>::~server() {
// 	run();
}

} // namespace: <>
